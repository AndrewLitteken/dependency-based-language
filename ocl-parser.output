Terminals unused in grammar

   TOKEN_COMMENT
   TOKEN_RIGHT_BRACKET
   TOKEN_LEFT_BRACKET
   TOKEN_RIGHT_BRACE
   TOKEN_LEFT_BRACE
   TOKEN_IN
   TOKEN_FOR
   TOKEN_ERROR
   TOKEN_SEMI


Grammar

    0 $accept: program TOKEN_EOF

    1 program: line_list

    2 line_list: line line_list
    3          | indent line line_list
    4          | %empty

    5 line: decl TOKEN_NEWLINE
    6     | stmt TOKEN_NEWLINE
    7     | TOKEN_NEWLINE

    8 fill_line: decl
    9          | stmt

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN TOKEN_COLON suite
   11     | name TOKEN_DEFINITION expr
   12     | name TOKEN_ASSIGN expr

   13 stmt: TOKEN_PRINT TOKEN_LEFT_PAREN expr TOKEN_RIGHT_PAREN
   14     | TOKEN_IF expr TOKEN_COLON suite
   15     | TOKEN_ELSE TOKEN_IF expr TOKEN_COLON suite
   16     | TOKEN_ELSE TOKEN_COLON suite
   17     | TOKEN_WHILE expr TOKEN_COLON suite
   18     | TOKEN_RETURN expr

   19 suite: TOKEN_NEWLINE indent fill_line

   20 expr: expr TOKEN_ASSIGN expr_or
   21     | expr TOKEN_INCEQ expr_or
   22     | expr TOKEN_DECEQ expr_or
   23     | expr TOKEN_MULTEQ expr_or
   24     | expr TOKEN_DIVEQ expr_or
   25     | expr_or

   26 expr_or: expr_or TOKEN_OR expr_and
   27        | expr_and

   28 expr_and: expr_and TOKEN_AND expr_eq
   29         | expr_eq

   30 expr_eq: expr_eq TOKEN_EQ expr_comp
   31        | expr_eq TOKEN_NE expr_comp
   32        | expr_comp

   33 expr_comp: expr_comp TOKEN_LT expr_add
   34          | expr_comp TOKEN_LE expr_add
   35          | expr_comp TOKEN_GT expr_add
   36          | expr_comp TOKEN_GE expr_add
   37          | expr_add

   38 expr_add: expr_add TOKEN_ADD expr_mul
   39         | expr_add TOKEN_MINUS expr_mul
   40         | expr_mul

   41 expr_mul: expr_mul TOKEN_MULTIPLY expr_exp
   42         | expr_mul TOKEN_DIVIDE expr_exp
   43         | expr_mul TOKEN_MOD expr_exp
   44         | expr_exp

   45 expr_exp: expr_exp TOKEN_EXPONENT expr_bool
   46         | expr_bool

   47 expr_bool: TOKEN_NOT non_int_literal
   48          | TOKEN_NOT name
   49          | non_int_literal
   50          | expr_minus

   51 expr_minus: TOKEN_MINUS expr_int
   52           | expr_int

   53 expr_int: value_literals
   54         | expr_inc

   55 expr_inc: expr_inc TOKEN_INCREMENT
   56         | expr_inc TOKEN_DECREMENT
   57         | expr_grp

   58 expr_grp: TOKEN_LEFT_PAREN expr TOKEN_RIGHT_PAREN
   59         | name

   60 indent: TOKEN_INDENT_TAB
   61       | TOKEN_INDENT_SPACE

   62 arg_list: arg TOKEN_COMMA arg_list
   63         | arg
   64         | %empty

   65 arg: name
   66    | name TOKEN_ASSIGN expr

   67 value_literals: TOKEN_INTEGER_LITERAL
   68               | TOKEN_FP_LITERAL

   69 non_int_literal: TOKEN_BOOL_LITERAL

   70 name: TOKEN_IDENTIFIER


Terminals, with rules where they appear

TOKEN_EOF (0) 0
error (256)
TOKEN_INDENT_TAB (258) 60
TOKEN_INDENT_SPACE (259) 61
TOKEN_COMMENT (260)
TOKEN_IDENTIFIER (261) 70
TOKEN_INTEGER_LITERAL (262) 67
TOKEN_BOOL_LITERAL (263) 69
TOKEN_FP_LITERAL (264) 68
TOKEN_RIGHT_PAREN (265) 10 13 58
TOKEN_LEFT_PAREN (266) 10 13 58
TOKEN_RIGHT_BRACKET (267)
TOKEN_LEFT_BRACKET (268)
TOKEN_RIGHT_BRACE (269)
TOKEN_LEFT_BRACE (270)
TOKEN_INCREMENT (271) 55
TOKEN_DECREMENT (272) 56
TOKEN_INCEQ (273) 21
TOKEN_DECEQ (274) 22
TOKEN_MULTEQ (275) 23
TOKEN_DIVEQ (276) 24
TOKEN_NOT (277) 47 48
TOKEN_EXPONENT (278) 45
TOKEN_MULTIPLY (279) 41
TOKEN_DIVIDE (280) 42
TOKEN_MOD (281) 43
TOKEN_ADD (282) 38
TOKEN_MINUS (283) 39 51
TOKEN_LT (284) 33
TOKEN_LE (285) 34
TOKEN_GT (286) 35
TOKEN_GE (287) 36
TOKEN_EQ (288) 30
TOKEN_NE (289) 31
TOKEN_AND (290) 28
TOKEN_OR (291) 26
TOKEN_IN (292)
TOKEN_ASSIGN (293) 10 12 20 66
TOKEN_DEFINITION (294) 11
TOKEN_PRINT (295) 13
TOKEN_FUNCTION (296) 10
TOKEN_NEWLINE (297) 5 6 7 19
TOKEN_FOR (298)
TOKEN_IF (299) 14 15
TOKEN_ELSE (300) 15 16
TOKEN_RETURN (301) 18
TOKEN_WHILE (302) 17
TOKEN_COLON (303) 10 14 15 16 17
TOKEN_COMMA (304) 62
TOKEN_ERROR (305)
TOKEN_SEMI (306)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
line_list (54)
    on left: 2 3 4, on right: 1 2 3
line (55)
    on left: 5 6 7, on right: 2 3
fill_line (56)
    on left: 8 9, on right: 19
decl (57)
    on left: 10 11 12, on right: 5 8
stmt (58)
    on left: 13 14 15 16 17 18, on right: 6 9
suite (59)
    on left: 19, on right: 10 14 15 16 17
expr (60)
    on left: 20 21 22 23 24 25, on right: 11 12 13 14 15 17 18 20 21
    22 23 24 58 66
expr_or (61)
    on left: 26 27, on right: 20 21 22 23 24 25 26
expr_and (62)
    on left: 28 29, on right: 26 27 28
expr_eq (63)
    on left: 30 31 32, on right: 28 29 30 31
expr_comp (64)
    on left: 33 34 35 36 37, on right: 30 31 32 33 34 35 36
expr_add (65)
    on left: 38 39 40, on right: 33 34 35 36 37 38 39
expr_mul (66)
    on left: 41 42 43 44, on right: 38 39 40 41 42 43
expr_exp (67)
    on left: 45 46, on right: 41 42 43 44 45
expr_bool (68)
    on left: 47 48 49 50, on right: 45 46
expr_minus (69)
    on left: 51 52, on right: 50
expr_int (70)
    on left: 53 54, on right: 51 52
expr_inc (71)
    on left: 55 56 57, on right: 54 55 56
expr_grp (72)
    on left: 58 59, on right: 57
indent (73)
    on left: 60 61, on right: 3 19
arg_list (74)
    on left: 62 63 64, on right: 10 62
arg (75)
    on left: 65 66, on right: 62 63
value_literals (76)
    on left: 67 68, on right: 53
non_int_literal (77)
    on left: 69, on right: 47 49
name (78)
    on left: 70, on right: 10 11 12 48 59 65 66


State 0

    0 $accept: . program TOKEN_EOF

    TOKEN_INDENT_TAB    shift, and go to state 1
    TOKEN_INDENT_SPACE  shift, and go to state 2
    TOKEN_IDENTIFIER    shift, and go to state 3
    TOKEN_PRINT         shift, and go to state 4
    TOKEN_NEWLINE       shift, and go to state 5
    TOKEN_IF            shift, and go to state 6
    TOKEN_ELSE          shift, and go to state 7
    TOKEN_RETURN        shift, and go to state 8
    TOKEN_WHILE         shift, and go to state 9

    $default  reduce using rule 4 (line_list)

    program    go to state 10
    line_list  go to state 11
    line       go to state 12
    decl       go to state 13
    stmt       go to state 14
    indent     go to state 15
    name       go to state 16


State 1

   60 indent: TOKEN_INDENT_TAB .

    $default  reduce using rule 60 (indent)


State 2

   61 indent: TOKEN_INDENT_SPACE .

    $default  reduce using rule 61 (indent)


State 3

   70 name: TOKEN_IDENTIFIER .

    $default  reduce using rule 70 (name)


State 4

   13 stmt: TOKEN_PRINT . TOKEN_LEFT_PAREN expr TOKEN_RIGHT_PAREN

    TOKEN_LEFT_PAREN  shift, and go to state 17


State 5

    7 line: TOKEN_NEWLINE .

    $default  reduce using rule 7 (line)


State 6

   14 stmt: TOKEN_IF . expr TOKEN_COLON suite

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 24
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 7

   15 stmt: TOKEN_ELSE . TOKEN_IF expr TOKEN_COLON suite
   16     | TOKEN_ELSE . TOKEN_COLON suite

    TOKEN_IF     shift, and go to state 40
    TOKEN_COLON  shift, and go to state 41


State 8

   18 stmt: TOKEN_RETURN . expr

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 42
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 9

   17 stmt: TOKEN_WHILE . expr TOKEN_COLON suite

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 43
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 10

    0 $accept: program . TOKEN_EOF

    TOKEN_EOF  shift, and go to state 44


State 11

    1 program: line_list .

    $default  reduce using rule 1 (program)


State 12

    2 line_list: line . line_list

    TOKEN_INDENT_TAB    shift, and go to state 1
    TOKEN_INDENT_SPACE  shift, and go to state 2
    TOKEN_IDENTIFIER    shift, and go to state 3
    TOKEN_PRINT         shift, and go to state 4
    TOKEN_NEWLINE       shift, and go to state 5
    TOKEN_IF            shift, and go to state 6
    TOKEN_ELSE          shift, and go to state 7
    TOKEN_RETURN        shift, and go to state 8
    TOKEN_WHILE         shift, and go to state 9

    $default  reduce using rule 4 (line_list)

    line_list  go to state 45
    line       go to state 12
    decl       go to state 13
    stmt       go to state 14
    indent     go to state 15
    name       go to state 16


State 13

    5 line: decl . TOKEN_NEWLINE

    TOKEN_NEWLINE  shift, and go to state 46


State 14

    6 line: stmt . TOKEN_NEWLINE

    TOKEN_NEWLINE  shift, and go to state 47


State 15

    3 line_list: indent . line line_list

    TOKEN_IDENTIFIER  shift, and go to state 3
    TOKEN_PRINT       shift, and go to state 4
    TOKEN_NEWLINE     shift, and go to state 5
    TOKEN_IF          shift, and go to state 6
    TOKEN_ELSE        shift, and go to state 7
    TOKEN_RETURN      shift, and go to state 8
    TOKEN_WHILE       shift, and go to state 9

    line  go to state 48
    decl  go to state 13
    stmt  go to state 14
    name  go to state 16


State 16

   10 decl: name . TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN TOKEN_COLON suite
   11     | name . TOKEN_DEFINITION expr
   12     | name . TOKEN_ASSIGN expr

    TOKEN_ASSIGN      shift, and go to state 49
    TOKEN_DEFINITION  shift, and go to state 50


State 17

   13 stmt: TOKEN_PRINT TOKEN_LEFT_PAREN . expr TOKEN_RIGHT_PAREN

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 51
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 18

   67 value_literals: TOKEN_INTEGER_LITERAL .

    $default  reduce using rule 67 (value_literals)


State 19

   69 non_int_literal: TOKEN_BOOL_LITERAL .

    $default  reduce using rule 69 (non_int_literal)


State 20

   68 value_literals: TOKEN_FP_LITERAL .

    $default  reduce using rule 68 (value_literals)


State 21

   58 expr_grp: TOKEN_LEFT_PAREN . expr TOKEN_RIGHT_PAREN

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 52
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 22

   47 expr_bool: TOKEN_NOT . non_int_literal
   48          | TOKEN_NOT . name

    TOKEN_IDENTIFIER    shift, and go to state 3
    TOKEN_BOOL_LITERAL  shift, and go to state 19

    non_int_literal  go to state 53
    name             go to state 54


State 23

   51 expr_minus: TOKEN_MINUS . expr_int

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21

    expr_int        go to state 55
    expr_inc        go to state 35
    expr_grp        go to state 36
    value_literals  go to state 37
    name            go to state 39


State 24

   14 stmt: TOKEN_IF expr . TOKEN_COLON suite
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60
    TOKEN_COLON   shift, and go to state 61


State 25

   25 expr: expr_or .
   26 expr_or: expr_or . TOKEN_OR expr_and

    TOKEN_OR  shift, and go to state 62

    $default  reduce using rule 25 (expr)


State 26

   27 expr_or: expr_and .
   28 expr_and: expr_and . TOKEN_AND expr_eq

    TOKEN_AND  shift, and go to state 63

    $default  reduce using rule 27 (expr_or)


State 27

   29 expr_and: expr_eq .
   30 expr_eq: expr_eq . TOKEN_EQ expr_comp
   31        | expr_eq . TOKEN_NE expr_comp

    TOKEN_EQ  shift, and go to state 64
    TOKEN_NE  shift, and go to state 65

    $default  reduce using rule 29 (expr_and)


State 28

   32 expr_eq: expr_comp .
   33 expr_comp: expr_comp . TOKEN_LT expr_add
   34          | expr_comp . TOKEN_LE expr_add
   35          | expr_comp . TOKEN_GT expr_add
   36          | expr_comp . TOKEN_GE expr_add

    TOKEN_LT  shift, and go to state 66
    TOKEN_LE  shift, and go to state 67
    TOKEN_GT  shift, and go to state 68
    TOKEN_GE  shift, and go to state 69

    $default  reduce using rule 32 (expr_eq)


State 29

   37 expr_comp: expr_add .
   38 expr_add: expr_add . TOKEN_ADD expr_mul
   39         | expr_add . TOKEN_MINUS expr_mul

    TOKEN_ADD    shift, and go to state 70
    TOKEN_MINUS  shift, and go to state 71

    $default  reduce using rule 37 (expr_comp)


State 30

   40 expr_add: expr_mul .
   41 expr_mul: expr_mul . TOKEN_MULTIPLY expr_exp
   42         | expr_mul . TOKEN_DIVIDE expr_exp
   43         | expr_mul . TOKEN_MOD expr_exp

    TOKEN_MULTIPLY  shift, and go to state 72
    TOKEN_DIVIDE    shift, and go to state 73
    TOKEN_MOD       shift, and go to state 74

    $default  reduce using rule 40 (expr_add)


State 31

   44 expr_mul: expr_exp .
   45 expr_exp: expr_exp . TOKEN_EXPONENT expr_bool

    TOKEN_EXPONENT  shift, and go to state 75

    $default  reduce using rule 44 (expr_mul)


State 32

   46 expr_exp: expr_bool .

    $default  reduce using rule 46 (expr_exp)


State 33

   50 expr_bool: expr_minus .

    $default  reduce using rule 50 (expr_bool)


State 34

   52 expr_minus: expr_int .

    $default  reduce using rule 52 (expr_minus)


State 35

   54 expr_int: expr_inc .
   55 expr_inc: expr_inc . TOKEN_INCREMENT
   56         | expr_inc . TOKEN_DECREMENT

    TOKEN_INCREMENT  shift, and go to state 76
    TOKEN_DECREMENT  shift, and go to state 77

    $default  reduce using rule 54 (expr_int)


State 36

   57 expr_inc: expr_grp .

    $default  reduce using rule 57 (expr_inc)


State 37

   53 expr_int: value_literals .

    $default  reduce using rule 53 (expr_int)


State 38

   49 expr_bool: non_int_literal .

    $default  reduce using rule 49 (expr_bool)


State 39

   59 expr_grp: name .

    $default  reduce using rule 59 (expr_grp)


State 40

   15 stmt: TOKEN_ELSE TOKEN_IF . expr TOKEN_COLON suite

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 78
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 41

   16 stmt: TOKEN_ELSE TOKEN_COLON . suite

    TOKEN_NEWLINE  shift, and go to state 79

    suite  go to state 80


State 42

   18 stmt: TOKEN_RETURN expr .
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60

    $default  reduce using rule 18 (stmt)


State 43

   17 stmt: TOKEN_WHILE expr . TOKEN_COLON suite
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60
    TOKEN_COLON   shift, and go to state 81


State 44

    0 $accept: program TOKEN_EOF .

    $default  accept


State 45

    2 line_list: line line_list .

    $default  reduce using rule 2 (line_list)


State 46

    5 line: decl TOKEN_NEWLINE .

    $default  reduce using rule 5 (line)


State 47

    6 line: stmt TOKEN_NEWLINE .

    $default  reduce using rule 6 (line)


State 48

    3 line_list: indent line . line_list

    TOKEN_INDENT_TAB    shift, and go to state 1
    TOKEN_INDENT_SPACE  shift, and go to state 2
    TOKEN_IDENTIFIER    shift, and go to state 3
    TOKEN_PRINT         shift, and go to state 4
    TOKEN_NEWLINE       shift, and go to state 5
    TOKEN_IF            shift, and go to state 6
    TOKEN_ELSE          shift, and go to state 7
    TOKEN_RETURN        shift, and go to state 8
    TOKEN_WHILE         shift, and go to state 9

    $default  reduce using rule 4 (line_list)

    line_list  go to state 82
    line       go to state 12
    decl       go to state 13
    stmt       go to state 14
    indent     go to state 15
    name       go to state 16


State 49

   10 decl: name TOKEN_ASSIGN . TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN TOKEN_COLON suite
   12     | name TOKEN_ASSIGN . expr

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23
    TOKEN_FUNCTION         shift, and go to state 83

    expr             go to state 84
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 50

   11 decl: name TOKEN_DEFINITION . expr

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 85
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 51

   13 stmt: TOKEN_PRINT TOKEN_LEFT_PAREN expr . TOKEN_RIGHT_PAREN
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_RIGHT_PAREN  shift, and go to state 86
    TOKEN_INCEQ        shift, and go to state 56
    TOKEN_DECEQ        shift, and go to state 57
    TOKEN_MULTEQ       shift, and go to state 58
    TOKEN_DIVEQ        shift, and go to state 59
    TOKEN_ASSIGN       shift, and go to state 60


State 52

   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or
   58 expr_grp: TOKEN_LEFT_PAREN expr . TOKEN_RIGHT_PAREN

    TOKEN_RIGHT_PAREN  shift, and go to state 87
    TOKEN_INCEQ        shift, and go to state 56
    TOKEN_DECEQ        shift, and go to state 57
    TOKEN_MULTEQ       shift, and go to state 58
    TOKEN_DIVEQ        shift, and go to state 59
    TOKEN_ASSIGN       shift, and go to state 60


State 53

   47 expr_bool: TOKEN_NOT non_int_literal .

    $default  reduce using rule 47 (expr_bool)


State 54

   48 expr_bool: TOKEN_NOT name .

    $default  reduce using rule 48 (expr_bool)


State 55

   51 expr_minus: TOKEN_MINUS expr_int .

    $default  reduce using rule 51 (expr_minus)


State 56

   21 expr: expr TOKEN_INCEQ . expr_or

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_or          go to state 88
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 57

   22 expr: expr TOKEN_DECEQ . expr_or

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_or          go to state 89
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 58

   23 expr: expr TOKEN_MULTEQ . expr_or

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_or          go to state 90
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 59

   24 expr: expr TOKEN_DIVEQ . expr_or

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_or          go to state 91
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 60

   20 expr: expr TOKEN_ASSIGN . expr_or

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_or          go to state 92
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 61

   14 stmt: TOKEN_IF expr TOKEN_COLON . suite

    TOKEN_NEWLINE  shift, and go to state 79

    suite  go to state 93


State 62

   26 expr_or: expr_or TOKEN_OR . expr_and

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_and         go to state 94
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 63

   28 expr_and: expr_and TOKEN_AND . expr_eq

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_eq          go to state 95
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 64

   30 expr_eq: expr_eq TOKEN_EQ . expr_comp

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_comp        go to state 96
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 65

   31 expr_eq: expr_eq TOKEN_NE . expr_comp

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_comp        go to state 97
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 66

   33 expr_comp: expr_comp TOKEN_LT . expr_add

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_add         go to state 98
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 67

   34 expr_comp: expr_comp TOKEN_LE . expr_add

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_add         go to state 99
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 68

   35 expr_comp: expr_comp TOKEN_GT . expr_add

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_add         go to state 100
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 69

   36 expr_comp: expr_comp TOKEN_GE . expr_add

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_add         go to state 101
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 70

   38 expr_add: expr_add TOKEN_ADD . expr_mul

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_mul         go to state 102
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 71

   39 expr_add: expr_add TOKEN_MINUS . expr_mul

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_mul         go to state 103
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 72

   41 expr_mul: expr_mul TOKEN_MULTIPLY . expr_exp

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_exp         go to state 104
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 73

   42 expr_mul: expr_mul TOKEN_DIVIDE . expr_exp

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_exp         go to state 105
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 74

   43 expr_mul: expr_mul TOKEN_MOD . expr_exp

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_exp         go to state 106
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 75

   45 expr_exp: expr_exp TOKEN_EXPONENT . expr_bool

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr_bool        go to state 107
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 76

   55 expr_inc: expr_inc TOKEN_INCREMENT .

    $default  reduce using rule 55 (expr_inc)


State 77

   56 expr_inc: expr_inc TOKEN_DECREMENT .

    $default  reduce using rule 56 (expr_inc)


State 78

   15 stmt: TOKEN_ELSE TOKEN_IF expr . TOKEN_COLON suite
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60
    TOKEN_COLON   shift, and go to state 108


State 79

   19 suite: TOKEN_NEWLINE . indent fill_line

    TOKEN_INDENT_TAB    shift, and go to state 1
    TOKEN_INDENT_SPACE  shift, and go to state 2

    indent  go to state 109


State 80

   16 stmt: TOKEN_ELSE TOKEN_COLON suite .

    $default  reduce using rule 16 (stmt)


State 81

   17 stmt: TOKEN_WHILE expr TOKEN_COLON . suite

    TOKEN_NEWLINE  shift, and go to state 79

    suite  go to state 110


State 82

    3 line_list: indent line line_list .

    $default  reduce using rule 3 (line_list)


State 83

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION . TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN TOKEN_COLON suite

    TOKEN_LEFT_PAREN  shift, and go to state 111


State 84

   12 decl: name TOKEN_ASSIGN expr .
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60

    $default  reduce using rule 12 (decl)


State 85

   11 decl: name TOKEN_DEFINITION expr .
   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60

    $default  reduce using rule 11 (decl)


State 86

   13 stmt: TOKEN_PRINT TOKEN_LEFT_PAREN expr TOKEN_RIGHT_PAREN .

    $default  reduce using rule 13 (stmt)


State 87

   58 expr_grp: TOKEN_LEFT_PAREN expr TOKEN_RIGHT_PAREN .

    $default  reduce using rule 58 (expr_grp)


State 88

   21 expr: expr TOKEN_INCEQ expr_or .
   26 expr_or: expr_or . TOKEN_OR expr_and

    TOKEN_OR  shift, and go to state 62

    $default  reduce using rule 21 (expr)


State 89

   22 expr: expr TOKEN_DECEQ expr_or .
   26 expr_or: expr_or . TOKEN_OR expr_and

    TOKEN_OR  shift, and go to state 62

    $default  reduce using rule 22 (expr)


State 90

   23 expr: expr TOKEN_MULTEQ expr_or .
   26 expr_or: expr_or . TOKEN_OR expr_and

    TOKEN_OR  shift, and go to state 62

    $default  reduce using rule 23 (expr)


State 91

   24 expr: expr TOKEN_DIVEQ expr_or .
   26 expr_or: expr_or . TOKEN_OR expr_and

    TOKEN_OR  shift, and go to state 62

    $default  reduce using rule 24 (expr)


State 92

   20 expr: expr TOKEN_ASSIGN expr_or .
   26 expr_or: expr_or . TOKEN_OR expr_and

    TOKEN_OR  shift, and go to state 62

    $default  reduce using rule 20 (expr)


State 93

   14 stmt: TOKEN_IF expr TOKEN_COLON suite .

    $default  reduce using rule 14 (stmt)


State 94

   26 expr_or: expr_or TOKEN_OR expr_and .
   28 expr_and: expr_and . TOKEN_AND expr_eq

    TOKEN_AND  shift, and go to state 63

    $default  reduce using rule 26 (expr_or)


State 95

   28 expr_and: expr_and TOKEN_AND expr_eq .
   30 expr_eq: expr_eq . TOKEN_EQ expr_comp
   31        | expr_eq . TOKEN_NE expr_comp

    TOKEN_EQ  shift, and go to state 64
    TOKEN_NE  shift, and go to state 65

    $default  reduce using rule 28 (expr_and)


State 96

   30 expr_eq: expr_eq TOKEN_EQ expr_comp .
   33 expr_comp: expr_comp . TOKEN_LT expr_add
   34          | expr_comp . TOKEN_LE expr_add
   35          | expr_comp . TOKEN_GT expr_add
   36          | expr_comp . TOKEN_GE expr_add

    TOKEN_LT  shift, and go to state 66
    TOKEN_LE  shift, and go to state 67
    TOKEN_GT  shift, and go to state 68
    TOKEN_GE  shift, and go to state 69

    $default  reduce using rule 30 (expr_eq)


State 97

   31 expr_eq: expr_eq TOKEN_NE expr_comp .
   33 expr_comp: expr_comp . TOKEN_LT expr_add
   34          | expr_comp . TOKEN_LE expr_add
   35          | expr_comp . TOKEN_GT expr_add
   36          | expr_comp . TOKEN_GE expr_add

    TOKEN_LT  shift, and go to state 66
    TOKEN_LE  shift, and go to state 67
    TOKEN_GT  shift, and go to state 68
    TOKEN_GE  shift, and go to state 69

    $default  reduce using rule 31 (expr_eq)


State 98

   33 expr_comp: expr_comp TOKEN_LT expr_add .
   38 expr_add: expr_add . TOKEN_ADD expr_mul
   39         | expr_add . TOKEN_MINUS expr_mul

    TOKEN_ADD    shift, and go to state 70
    TOKEN_MINUS  shift, and go to state 71

    $default  reduce using rule 33 (expr_comp)


State 99

   34 expr_comp: expr_comp TOKEN_LE expr_add .
   38 expr_add: expr_add . TOKEN_ADD expr_mul
   39         | expr_add . TOKEN_MINUS expr_mul

    TOKEN_ADD    shift, and go to state 70
    TOKEN_MINUS  shift, and go to state 71

    $default  reduce using rule 34 (expr_comp)


State 100

   35 expr_comp: expr_comp TOKEN_GT expr_add .
   38 expr_add: expr_add . TOKEN_ADD expr_mul
   39         | expr_add . TOKEN_MINUS expr_mul

    TOKEN_ADD    shift, and go to state 70
    TOKEN_MINUS  shift, and go to state 71

    $default  reduce using rule 35 (expr_comp)


State 101

   36 expr_comp: expr_comp TOKEN_GE expr_add .
   38 expr_add: expr_add . TOKEN_ADD expr_mul
   39         | expr_add . TOKEN_MINUS expr_mul

    TOKEN_ADD    shift, and go to state 70
    TOKEN_MINUS  shift, and go to state 71

    $default  reduce using rule 36 (expr_comp)


State 102

   38 expr_add: expr_add TOKEN_ADD expr_mul .
   41 expr_mul: expr_mul . TOKEN_MULTIPLY expr_exp
   42         | expr_mul . TOKEN_DIVIDE expr_exp
   43         | expr_mul . TOKEN_MOD expr_exp

    TOKEN_MULTIPLY  shift, and go to state 72
    TOKEN_DIVIDE    shift, and go to state 73
    TOKEN_MOD       shift, and go to state 74

    $default  reduce using rule 38 (expr_add)


State 103

   39 expr_add: expr_add TOKEN_MINUS expr_mul .
   41 expr_mul: expr_mul . TOKEN_MULTIPLY expr_exp
   42         | expr_mul . TOKEN_DIVIDE expr_exp
   43         | expr_mul . TOKEN_MOD expr_exp

    TOKEN_MULTIPLY  shift, and go to state 72
    TOKEN_DIVIDE    shift, and go to state 73
    TOKEN_MOD       shift, and go to state 74

    $default  reduce using rule 39 (expr_add)


State 104

   41 expr_mul: expr_mul TOKEN_MULTIPLY expr_exp .
   45 expr_exp: expr_exp . TOKEN_EXPONENT expr_bool

    TOKEN_EXPONENT  shift, and go to state 75

    $default  reduce using rule 41 (expr_mul)


State 105

   42 expr_mul: expr_mul TOKEN_DIVIDE expr_exp .
   45 expr_exp: expr_exp . TOKEN_EXPONENT expr_bool

    TOKEN_EXPONENT  shift, and go to state 75

    $default  reduce using rule 42 (expr_mul)


State 106

   43 expr_mul: expr_mul TOKEN_MOD expr_exp .
   45 expr_exp: expr_exp . TOKEN_EXPONENT expr_bool

    TOKEN_EXPONENT  shift, and go to state 75

    $default  reduce using rule 43 (expr_mul)


State 107

   45 expr_exp: expr_exp TOKEN_EXPONENT expr_bool .

    $default  reduce using rule 45 (expr_exp)


State 108

   15 stmt: TOKEN_ELSE TOKEN_IF expr TOKEN_COLON . suite

    TOKEN_NEWLINE  shift, and go to state 79

    suite  go to state 112


State 109

   19 suite: TOKEN_NEWLINE indent . fill_line

    TOKEN_IDENTIFIER  shift, and go to state 3
    TOKEN_PRINT       shift, and go to state 4
    TOKEN_IF          shift, and go to state 6
    TOKEN_ELSE        shift, and go to state 7
    TOKEN_RETURN      shift, and go to state 8
    TOKEN_WHILE       shift, and go to state 9

    fill_line  go to state 113
    decl       go to state 114
    stmt       go to state 115
    name       go to state 16


State 110

   17 stmt: TOKEN_WHILE expr TOKEN_COLON suite .

    $default  reduce using rule 17 (stmt)


State 111

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN . arg_list TOKEN_RIGHT_PAREN TOKEN_COLON suite

    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 64 (arg_list)

    arg_list  go to state 116
    arg       go to state 117
    name      go to state 118


State 112

   15 stmt: TOKEN_ELSE TOKEN_IF expr TOKEN_COLON suite .

    $default  reduce using rule 15 (stmt)


State 113

   19 suite: TOKEN_NEWLINE indent fill_line .

    $default  reduce using rule 19 (suite)


State 114

    8 fill_line: decl .

    $default  reduce using rule 8 (fill_line)


State 115

    9 fill_line: stmt .

    $default  reduce using rule 9 (fill_line)


State 116

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list . TOKEN_RIGHT_PAREN TOKEN_COLON suite

    TOKEN_RIGHT_PAREN  shift, and go to state 119


State 117

   62 arg_list: arg . TOKEN_COMMA arg_list
   63         | arg .

    TOKEN_COMMA  shift, and go to state 120

    $default  reduce using rule 63 (arg_list)


State 118

   65 arg: name .
   66    | name . TOKEN_ASSIGN expr

    TOKEN_ASSIGN  shift, and go to state 121

    $default  reduce using rule 65 (arg)


State 119

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN . TOKEN_COLON suite

    TOKEN_COLON  shift, and go to state 122


State 120

   62 arg_list: arg TOKEN_COMMA . arg_list

    TOKEN_IDENTIFIER  shift, and go to state 3

    $default  reduce using rule 64 (arg_list)

    arg_list  go to state 123
    arg       go to state 117
    name      go to state 118


State 121

   66 arg: name TOKEN_ASSIGN . expr

    TOKEN_IDENTIFIER       shift, and go to state 3
    TOKEN_INTEGER_LITERAL  shift, and go to state 18
    TOKEN_BOOL_LITERAL     shift, and go to state 19
    TOKEN_FP_LITERAL       shift, and go to state 20
    TOKEN_LEFT_PAREN       shift, and go to state 21
    TOKEN_NOT              shift, and go to state 22
    TOKEN_MINUS            shift, and go to state 23

    expr             go to state 124
    expr_or          go to state 25
    expr_and         go to state 26
    expr_eq          go to state 27
    expr_comp        go to state 28
    expr_add         go to state 29
    expr_mul         go to state 30
    expr_exp         go to state 31
    expr_bool        go to state 32
    expr_minus       go to state 33
    expr_int         go to state 34
    expr_inc         go to state 35
    expr_grp         go to state 36
    value_literals   go to state 37
    non_int_literal  go to state 38
    name             go to state 39


State 122

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN TOKEN_COLON . suite

    TOKEN_NEWLINE  shift, and go to state 79

    suite  go to state 125


State 123

   62 arg_list: arg TOKEN_COMMA arg_list .

    $default  reduce using rule 62 (arg_list)


State 124

   20 expr: expr . TOKEN_ASSIGN expr_or
   21     | expr . TOKEN_INCEQ expr_or
   22     | expr . TOKEN_DECEQ expr_or
   23     | expr . TOKEN_MULTEQ expr_or
   24     | expr . TOKEN_DIVEQ expr_or
   66 arg: name TOKEN_ASSIGN expr .

    TOKEN_INCEQ   shift, and go to state 56
    TOKEN_DECEQ   shift, and go to state 57
    TOKEN_MULTEQ  shift, and go to state 58
    TOKEN_DIVEQ   shift, and go to state 59
    TOKEN_ASSIGN  shift, and go to state 60

    $default  reduce using rule 66 (arg)


State 125

   10 decl: name TOKEN_ASSIGN TOKEN_FUNCTION TOKEN_LEFT_PAREN arg_list TOKEN_RIGHT_PAREN TOKEN_COLON suite .

    $default  reduce using rule 10 (decl)
